// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  address       String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  favorites     Favorite[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Cupcake {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  featured    Boolean     @default(false)
  new         Boolean     @default(false)
  rating      Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favorites   Favorite[]
  orderItems  OrderItem[]
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  total         Float
  status        String      @default("PENDING")
  deliveryDate  DateTime
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  cupcakeId Int
  cupcake   Cupcake  @relation(fields: [cupcakeId], references: [id])
  quantity  Int
  price     Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  cupcakeId Int
  cupcake   Cupcake  @relation(fields: [cupcakeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cupcakeId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}
